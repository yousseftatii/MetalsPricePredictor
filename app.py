import streamlit as st
import pandas as pd
import numpy as np
import joblib
import plotly.express as px
import seaborn as sns
import matplotlib.pyplot as plt
from pathlib import Path

# Set page config
st.set_page_config(
    page_title="Metals Price Predictor",
    page_icon="üìä",
    layout="wide",
    initial_sidebar_state="expanded"
)


st.markdown("""
    <style>
    @import url('https://fonts.googleapis.com/css2?family=Comic+Neue:wght@400;700&family=Press+Start+2P&family=Roboto+Mono:wght@400;700&display=swap');
    /* Main background */
    .stApp {
        background-color: #1c110c; /* Dark brown */
        color: #F5DEB3; /* Light brown text */
    }
    /* Sidebar background */
    section[data-testid="stSidebar"] {
        background-color: #30200a; /* Light brown */
        border-right: 2px solid #8B7355; /* Darker brown border */
    }
            
    .stMarkdown h1, .stMarkdown h2, .stMarkdown h3 {
    text-align: center;}
            
    /* General text */
    * {
        font-family: 'Roboto Mono', monospace;
        color: #FFFFFF; /* Light brown text */;
    }
            
    /* Headers */
    h1, h2, h3, h4, h5, h6 {
        font-family: 'Press Start 2P', cursive;
        color: #F5DEB3; /* Light brown text */
        animation: glow 2s infinite alternate;
        text-align: center;
    }
    
    @keyframes glow {
        0% {
            text-shadow: 0 0 5px #8B7355, 0 0 10px #8B7355, 0 0 20px #8B7355;
        }
        100% {
            text-shadow: 0 0 10px #D2B48C, 0 0 20px #D2B48C, 0 0 30px #D2B48C;
        }
    }
    /* Buttons */
    .stButton>button {
        background-color: #8B7355; /* Dark brown */
        color: white;
        border-radius: 8px;
        padding: 10px 24px;
        font-weight: bold;
        transition: transform 0.3s ease, box-shadow 0.3s ease;
    }
    .stButton>button:hover {
        transform: scale(1.05);
        box-shadow: 0 0 10px #D2B48C, 0 0 20px #D2B48C;
    }
    /* Metric boxes */
    .metric-box {
        background-color: #D2B48C; /* Light brown */
        padding: 15px;
        border-radius: 10px;
        margin: 10px 0;
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        transition: transform 0.3s ease, box-shadow 0.3s ease;
    }
    .metric-box:hover {
        transform: scale(1.02);
        box-shadow: 0 4px 8px rgba(0,0,0,0.2);
    }
    /* Model results */
    .model-results {
        border-left: 3px solid #8B7355; /* Dark brown */
        padding-left: 15px;
        margin: 20px 0;
        transition: border-color 0.3s ease;
    }
    .model-results:hover {
        border-left-color: #D2B48C; /* Light brown */
    }
    /* Sliders and number inputs */
    .stSlider, .stNumberInput {
        margin-bottom: 20px;
    }
    /* Footer */
    .footer {
        text-align: center;
        padding: 10px;
        background-color: #D2B48C; /* Light brown */
        border-radius: 10px;
        margin-top: 20px;
        animation: fadeIn 2s ease-in-out;
    }
    @keyframes fadeIn {
        0% {
            opacity: 0;
        }
        100% {
            opacity: 1;
        }
    }
            
    /* Sidebar button hover effect */
    .stSidebar .stButton>button:hover {
        background-color: #D2B48C; /* Light brown */
        color: #8B7355; /* Dark brown */
    }
    </style>
    """, unsafe_allow_html=True)

# Load dataset
@st.cache_data
def load_data():
    df = pd.read_csv("clean_data.csv")  # Ensure the CSV is in the same directory as app.py
    return df

df = load_data()

# Define the correct path to the Models directory
MODELS_DIR = Path(".")  # Current directory (where app.py is located)

# Model performance data for the best models
BEST_MODEL_METRICS = {
    "Prix Or": {
        "Model" : "RandomForestRegressor",
        "MAE": 36.7712,
        "MSE": 2425.7423,
        "RMSE": 49.2518,
        "R¬≤": 0.9857,
    },
    "PrixArgent": {
        "Model" : "RandomForestRegressor",
        "MAE": 164.7938,
        "MSE": 70212.5697,
        "RMSE": 264.9765,
        "R¬≤": 0.9070,
    }
}

# Define the features used during training for each target
FEATURES_USED_IN_TRAINING = {
    "Prix Or": ['PrixArgent', 'R√©serve ext√©rieur', 'Prix Gaz naturel', 'Indice des prix √† la consommation'],
    "PrixArgent": ['Prix Or', 'Prix Gaz naturel', 'Export']
}

# Input ranges for user-defined features (based on df.describe())
INPUT_RANGES = {
    "Prix Or": {
        "PrixArgent": {"min": 786.38, "max": 4279.79, "default": 2039.01},
        "R√©serve ext√©rieur": {"min": 65063.0, "max": 153075.0, "default": 109130.21},
        "Prix Gaz naturel": {"min": 1.08, "max": 2.64, "default": 1.78},
        "Indice des prix √† la consommation": {"min": 198.1, "max": 234.85, "default": 217.63}
    },
    "PrixArgent": {
        "Prix Or": {"min": 476.67, "max": 1770.95, "default": 1114.43},
        "Prix Gaz naturel": {"min": 1.08, "max": 2.64, "default": 1.78},
        "Export": {"min": 107.6, "max": 135.3, "default": 123.4}
    }
}

# Sidebar configuration
st.sidebar.title("Configuration")
target = st.sidebar.selectbox("S√©lectionner la Variable Cible", list(BEST_MODEL_METRICS.keys()))

# Add a refresh button in the sidebar
if st.sidebar.button("Actualiser les Donn√©es et Mod√®les"):
    st.cache_data.clear()
    st.cache_resource.clear()
    st.success("Donn√©es et mod√®les actualis√©s avec succ√®s!")

# Main app
st.title("Metals Price Predictor")
st.markdown("""
Plongez dans l'univers fascinant de la pr√©diction des prix des m√©taux pr√©cieux gr√¢ce √† des mod√®les de machine learning de pointe. 
Cette application r√©volutionnaire vous permet d'explorer les tendances du march√© de l'or et de l'argent avec une pr√©cision in√©gal√©e. 
Que vous soyez un investisseur chevronn√©, un analyste financier ou simplement curieux des dynamiques √©conomiques, 
**Metals Price Predictor** vous offre des outils puissants pour anticiper les fluctuations des prix et prendre des d√©cisions √©clair√©es.
""")

# Project Overview and Model Performance Table (Side by Side)
col1, col2 = st.columns([2, 2])
with col1:
    st.subheader("üìå Aper√ßu du Projet")
    st.write("""
    **Metals Price Predictor** est une application innovante con√ßue pour pr√©dire les prix de l'or (`Prix Or`) et de l'argent (`PrixArgent`) 
    en utilisant des mod√®les de machine learning entra√Æn√©s sur des donn√©es historiques. Les performances des mod√®les sont √©valu√©es 
    √† l'aide de m√©triques robustes.
    """)
    st.write("**Variables Cl√©s :**")
    st.write("""
    - **Prix Or** : Influenc√© par des facteurs macro√©conomiques tels que l'inflation, les r√©serves √©trang√®res et les prix de l'argent.
    - **PrixArgent** : D√©pend des prix de l'or, des exportations industrielles et des co√ªts √©nerg√©tiques (prix du gaz naturel).
    """)
    st.write("**Guide d'Utilisation :**")
    st.write("""
    1. **S√©lectionnez une variable cible** : Choisissez entre l'or ou l'argent.
    2. **Ajustez les curseurs** : Modifiez les valeurs des variables cl√©s pour explorer diff√©rents sc√©narios.
    3. **G√©n√©rez la pr√©diction** : Obtenez des pr√©visions pr√©cises en un clic.
    """)

with col2:
    st.subheader("üìä Performance des Mod√®les")
    metrics_df = pd.DataFrame(BEST_MODEL_METRICS).T
    st.dataframe(metrics_df)

    st.subheader("üìÇ Aper√ßu des Donn√©es")
    st.dataframe(df.sample(5))


# Prediction Section (Input Sliders and Prediction Results Side by Side)
col3, col4 = st.columns([3, 3])
with col3:
    with st.form("prediction_form"):
        st.subheader(f"Pr√©dire {target}")
        inputs = {}
        features = FEATURES_USED_IN_TRAINING[target]
        
        for feature in features:
            if feature in INPUT_RANGES[target]:
                inputs[feature] = st.slider(
                    label=feature,
                    min_value=float(INPUT_RANGES[target][feature]["min"]),
                    max_value=float(INPUT_RANGES[target][feature]["max"]),
                    value=float(INPUT_RANGES[target][feature]["default"]),
                    step=0.1
                )
            else:
                st.warning(f"La variable '{feature}' est manquante dans INPUT_RANGES. Utilisation d'une plage par d√©faut.")
                inputs[feature] = st.slider(
                    label=feature,
                    min_value=0.0,
                    max_value=100.0,
                    value=50.0,
                    step=0.1
                )
        
        submitted = st.form_submit_button("G√©n√©rer la Pr√©diction")

with col4:
    if submitted:
        try:
            # Prepare input data as a DataFrame with the exact features used during training
            input_data = pd.DataFrame([inputs], columns=features)
            
            # Load and use scaler
            scaler_path = MODELS_DIR / f"{target.lower()}_scaler_standard_new.pkl"
            if not scaler_path.exists():
                st.error(f"Scaler file for {target} not found at {scaler_path}.")
                st.stop()
            scaler = joblib.load(scaler_path)
            
            # Scale the input data
            scaled_input = scaler.transform(input_data)
            
            # Load model
            model_path = MODELS_DIR / f"{target.lower()}_random_forest_model_new.pkl"
            if not model_path.exists():
                st.error(f"Model file for {target} not found at {model_path}.")
                st.stop()
            model = joblib.load(model_path)
            
            # Make prediction
            prediction = model.predict(scaled_input)[0]
            
            # Display prediction
            st.subheader("R√©sultats de la Pr√©diction")
            st.markdown(f"**{target} Pr√©dit:**")
            st.markdown(f"<div class='metric-box' style='font-size: 24px; color: #000000;'>{prediction:,.2f}</div>", unsafe_allow_html=True)
            
            # Prediction Insights
            st.subheader("üí° Analyse de la Pr√©diction")
            st.write(f"La valeur pr√©dite pour {target} est **{prediction:,.2f}**.")
            st.write("Cette pr√©diction est bas√©e sur les entr√©es suivantes :")
            st.write(inputs)
        
        except Exception as e:
            st.error(f"Erreur de pr√©diction : {str(e)}")



# Custom CSS for timeline and animations
st.markdown("""
<style>
@keyframes slideIn {
  from { transform: translateX(100%); opacity: 0; }
  to { transform: translateX(0); opacity: 1; }
}

@keyframes fadeIn {
  from { opacity: 0; }
  to { opacity: 1; }
}

.timeline-container {
  position: relative;
  padding: 20px 0;
  max-height: 600px;
  overflow-y: auto;
}

.timeline-step {
  position: relative;
  padding: 25px;
  margin: 0 0 30px 30px;
  border-radius: 10px;
  background: #2a1a0f;
  border-left: 4px solid #8B7355;
  animation: slideIn 0.8s ease-out;
  transition: all 0.3s ease;
  color: white; /* Set all text to white */
}

.timeline-step h3, .timeline-step h4, .timeline-step p, .timeline-step strong, .timeline-step span {
  color: white; /* Ensure all text inside is white */
}

.timeline-step:hover {
  transform: translateY(-5px);
  box-shadow: 0 5px 15px rgba(139, 115, 85, 0.3);
}

.timeline-icon {
  position: absolute;
  left: -45px;
  top: 15px;
  font-size: 24px;
  background: #8B7355;
  border-radius: 50%;
  width: 40px;
  height: 40px;
  display: flex;
  align-items: center;
  justify-content: center;
  animation: fadeIn 1s ease-in;
}

.progress-bar {
  position: fixed;
  bottom: 0;
  left: 0;
  height: 6px; /* Increased height for better visibility */
  background: linear-gradient(90deg, #8B7355, #D2B48C); /* Gradient for visual appeal */
  z-index: 999;
  transition: width 0.3s ease;
  box-shadow: 0 2px 5px rgba(139, 115, 85, 0.5); /* Added shadow for prominence */
}

.progress-bar::after {
  content: '';
  position: absolute;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  background: rgba(255, 255, 255, 0.2);
  animation: progress-glow 2s infinite;
}

@keyframes progress-glow {
  0% { opacity: 0.5; }
  50% { opacity: 1; }
  100% { opacity: 0.5; }
}
</style>
""", unsafe_allow_html=True)

# Timeline Container
with st.container():
    st.markdown('<div class="timeline-container">', unsafe_allow_html=True)
    
# Section Documentation : Parcours du Projet
st.markdown("---")
st.subheader("üöÄ Parcours Scientifique du Projet")
st.write("D√©couvrez comment nous avons transform√© des donn√©es brutes en insights pr√©dictifs")

# Conteneur de la timeline
with st.container():
    st.markdown('<div class="timeline-container">', unsafe_allow_html=True)
    
    # 1. Compr√©hension du Probl√®me
    st.markdown("""
    <div class="timeline-step">
        <div class="timeline-icon">üîç</div>
        <h3 style='margin-top:0'>1. Cadrage du Probl√®me</h3>
        <div class="timeline-content">
            <p><strong>Enjeux √âconomiques :</strong><br>
            Les prix de l'or et de l'argent sont des indicateurs cl√©s pour les march√©s financiers,
            influen√ßant les strat√©gies d'investissement et les politiques mon√©taires.</p>
            <p><strong>D√©fis Identifi√©s :</strong><br>
            <span>‚Ä¢ Pr√©visions manuelles peu fiables<br>
            ‚Ä¢ Complexit√© des interactions march√©<br>
            ‚Ä¢ Volatilit√© des mati√®res premi√®res</span></p>
        </div>
    </div>
    """, unsafe_allow_html=True)

    # 2. Nettoyage des Donn√©es
    st.markdown(f"""
    <div class="timeline-step">
        <div class="timeline-icon">üßπ</div>
        <h3 style='margin-top:0'>2. Pr√©traitement des Donn√©es</h3>
        <div class="timeline-content">
            <div style='display:grid; grid-template-columns:1fr 1fr; gap:15px'>
                <div style='padding:15px; background:#1c110c; border-radius:8px'>
                    <h4 style='margin:0 0 10px 0'>Donn√©es Brutes</h4>
                    <p>‚Ä¢ {len(df.columns)+3} variables initiales<br>
                    ‚Ä¢ Valeurs aberrantes.. <br>
                    ‚Ä¢ Incoh√©rences temporelles</p>
                </div>
                <div style='padding:15px; background:#1c110c; border-radius:8px'>
                    <h4 style='margin:0 0 10px 0'>Donn√©es Nettoy√©es</h4>
                    <p>‚Ä¢ {len(df.columns)} variables pertinentes<br>
                    ‚Ä¢ Dates standardis√©es (jour/mois/ann√©e)<br>
                    ‚Ä¢ Correction de l'asym√©trie :
                      <span>
                      <br>‚Ä¢ Prix Gaz naturel (log)
                      <br>‚Ä¢ Prix Caf√© Arabica (log)
                      <br>‚Ä¢ Production Industrielle (‚àö)
                      </span>
                    </p>
                </div>
            </div>
        </div>
    </div>
    """, unsafe_allow_html=True)

    # 3. S√©lection des Variables
    st.markdown("""
    <div class="timeline-step">
        <div class="timeline-icon">üéØ</div>
        <h3 style='margin-top:0'>3. S√©lection Strat√©gique des Variables</h3>
        <div class="timeline-content">
            <div style='display:grid; grid-template-columns:1fr 1fr; gap:15px'>
                <div style='padding:15px; background:#1c110c; border-radius:8px'>
                    <h4 style='margin:0 0 10px 0'>Mod√®le Or</h4>
                    ‚Ä¢ Prix de l'Argent<br>
                    ‚Ä¢ R√©serves √âtrang√®res<br>
                    ‚Ä¢ Prix Gaz Naturel<br>
                    ‚Ä¢ Indice des Prix √† la Consommation
                </div>
                <div style='padding:15px; background:#1c110c; border-radius:8px'>
                    <h4 style='margin:0 0 10px 0'>Mod√®le Argent</h4>
                    ‚Ä¢ Prix de l'Or<br>
                    ‚Ä¢ Prix Gaz Naturel<br>
                    ‚Ä¢ Exportations
                </div>
            </div>
            <p style='margin-top:15px'>
            S√©lection bas√©e sur :<br>
            ‚Ä¢ Analyse de corr√©lation (Pearson > 0.85)<br>
            ‚Ä¢ Contexte √©conomique (demande industrielle, inflation)
            </p>
        </div>
    </div>
    """, unsafe_allow_html=True)

    # 4. Analyse des Relations Non-Lin√©aires
    st.markdown("""
    <div class="timeline-step">
        <div class="timeline-icon">üìä</div>
        <h3 style='margin-top:0'>4. Analyse des Relations Complexes</h3>
        <div class="timeline-content">
            <div style='display:grid; grid-template-columns:1fr 1fr; gap:15px'>
                <div style='padding:15px; background:#1c110c; border-radius:8px'>
                    <h4 style='margin:0 0 10px 0'>Or vs Exportations</h4>
                    <p>Relation non-lin√©aire<br>
                    R¬≤ = 0.78</p>
                </div>
                <div style='padding:15px; background:#1c110c; border-radius:8px'>
                    <h4 style='margin:0 0 10px 0'>Argent vs Exportations</h4>
                    <p>Relation non-lin√©aire<br>
                    R¬≤ = 0.82</p>
                </div>
            </div>
            <p style='margin-top:10px'>
            ‚ûî Les relations entre les exportations et les prix de l'or/argent sont non-lin√©aires, 
            n√©cessitant des mod√®les capables de capturer ces complexit√©s.</p>
        </div>
    </div>
    """, unsafe_allow_html=True)

    # 5. D√©veloppement des Mod√®les
    st.markdown("""
    <div class="timeline-step">
        <div class="timeline-icon">üß†</div>
        <h3 style='margin-top:0'>5. √âvolution des Mod√®les</h3>
        <div class="timeline-content">
            <div style='display:grid; grid-template-columns:repeat(4,1fr); gap:10px; margin-bottom:20px'>
                <div style='padding:15px; background:#1c110c; border-radius:8px; text-align:center'>
                    <h4 style='margin:0'>Lin√©aire</h4>
                    <p style='font-size:0.9em'>R¬≤ Or: 0.97<br>Argent: 0.89</p>
                </div>
                <div style='padding:15px; background:#1c110c; border-radius:8px; text-align:center'>
                    <h4 style='margin:0'>Ridge</h4>
                    <p style='font-size:0.9em'>R¬≤ Or: 0.97<br>Argent: 0.90</p>
                </div>
                <div style='padding:15px; background:#1c110c; border-radius:8px; text-align:center'>
                    <h4 style='margin:0'>Random Forest</h4>
                    <p style='font-size:0.9em'>R¬≤ Or: 0.99<br>Argent: 0.91</p>
                </div>
                <div style='padding:15px; background:#1c110c; border-radius:8px; text-align:center'>
                    <h4 style='margin:0'>XGBoost</h4>
                    <p style='font-size:0.9em'>R¬≤ Or: 0.98<br>Argent: 0.91</p>
                </div>
            </div>
            {plot}
        </div>
    </div>
    """.format(plot=px.line(pd.DataFrame({
        "Mod√®le": ["Lin√©aire", "Ridge", "Random Forest", "XGBoost"],
        "Or": [0.9738, 0.9730, 0.9857, 0.9841],
        "Argent": [0.8926, 0.8973, 0.9070, 0.9057]
    }), x="Mod√®le", y=["Or", "Argent"], title="√âvolution des Performances").update_layout(
        plot_bgcolor='#1c110c',
        paper_bgcolor='#1c110c',
        font_color='white'  # Set plot text to white
    ).to_html()), unsafe_allow_html=True)



    # 7. Conclusions Scientifiques
    st.markdown("""
    <div class="timeline-step">
        <div class="timeline-icon">üèÜ</div>
        <h3 style='margin-top:0'>6. Conclusions Cl√©s</h3>
        <div class="timeline-content">
            <div style='padding:15px; background:#1c110c; border-radius:8px'>
                <p><strong>Insights Principaux :</strong><br>
                ‚Ä¢ Relations non-lin√©aires dominantes (R¬≤ > 0.85)<br>
                ‚Ä¢ Robustesse aux multicollin√©arit√©s (VIF < 5)<br>
                ‚Ä¢ Performance optimale avec Random Forest</p>
                <p><strong>Implications :</strong><br>
                ‚Ä¢ Outil fiable pour strat√©gies de couverture<br>
                ‚Ä¢ D√©tection pr√©coce des tendances march√©<br>
                ‚Ä¢ Optimisation des portefeuilles mati√®res premi√®res</p>
            </div>
        </div>
    </div>
    """, unsafe_allow_html=True)

    st.markdown('</div>', unsafe_allow_html=True)

# Barre de progression anim√©e
st.markdown('<div class="progress-bar" style="width:100%"></div>', unsafe_allow_html=True)


# References Section
st.markdown("---")
st.write("**R√©f√©rences**")
st.write("- Jeu de Donn√©es: [Lien vers le jeu de donn√©es](#)")
st.write("- Outils: Streamlit, Plotly, Scikit-learn")

# Footer
st.markdown("---")
st.markdown("Made with ‚ù§Ô∏è By | Youssef TATI & Karim Maktouf")
